syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.snippet_sample";
option java_outer_classname = "snippet_sample_Proto";
option objc_class_prefix = "SSP";

package StorageEngineInstance;

service StorageEngineInterface {
  rpc GenericQueryInterface(GenericQuery) returns (Response) {}
  rpc OffloadingQueryInterface (stream SnippetRequest) returns (QueryStringResult) {}
}

message SnippetRequest {
  enum SnippetType {
    CSD_SCAN_SNIPPET = 0;
    AGGREGATION_SNIPPET = 1;
    STORAGE_FILTER_SNIPPET = 2;
    INNER_JOIN_SNIPPET = 3;
    LEFT_OUTER_JOIN_SNIPPET = 4;
    RIGHT_OUTER_JOIN_SNIPPET = 5;
    CROSS_JOIN_SNIPPET = 6;
    UNION_SNIPPET = 7;
    IN_SNIPPET = 8;
    DEPENDENCY_INNER_JOIN_SNIPPET = 9;
    DEPENDENCY_EXIST_SNIPPET = 10;
    DEPENDENCY_IN_SNIPPET = 11;
  }
  SnippetType type = 1;
  Snippet snippet = 2;
  ScanInfo scan_info = 3;
}

message Chunk {
  int64 offset = 1;
  int32 length = 2;
}

message ScanInfo {
  message BlockInfo {
    string sst_name = 1;
    repeated string csd_list = 2;
    repeated Chunk lba_list = 3;
  }
  repeated BlockInfo block_info = 1;
}

message Snippet {
  enum ValueType {
    INT8 = 0;
    INT16 = 1;
    INT32 = 2; //DEFAULT
    INT64 = 3;
    FLOAT32 = 4;
    FLOAT64 = 5;
    NUMERIC = 6;
    DATE = 7;
    TIMESTAMP = 8;
    STRING = 9;
    COLUMN = 10;
    OPERATOR = 11; //value string으로 연산자 확인
  }
  message Filter {
    enum OperType {
      KETI_DEFAULT = 0; //DEFAULT
      KETI_GE = 1;
      KETI_LE = 2;
      KETI_GT = 3;
      KETI_LT = 4;
      KETI_ET = 5;
      KETI_NE = 6;
      KETI_LIKE = 7;
      KETI_BETWEEN = 8;
      KETI_IN = 9;
      KETI_IS = 10;
      KETI_ISNOT = 11;
      KETI_NOT = 12;
      KETI_AND = 13;
      KETI_OR = 14;
      KETI_ALL = 15;
      KETI_SUBSTRING = 16;
    }
    message FilterValue {
      repeated ValueType type = 1;
      repeated string value = 2;
    }
    FilterValue LV = 1;
    OperType Operator = 2;
    FilterValue RV = 3;
  }
  message Projection {
    enum SelectType{
      COLUMNNAME = 0; //DEFAULT
      SUM = 1;
      AVG = 2;
      COUNT = 3;
      COUNTSTAR = 4;
      COUNTDISTINCT = 5;
      TOP = 6;
      MIN = 7;
      MAX = 8;
    }
    SelectType select_type = 1;
    repeated string value = 2;
    repeated ValueType value_type = 3;    
  }
  message Order {
    enum OrderDirection {
      ASC = 0; //DEFAULT
      DESC = 1;
    }
    repeated OrderDirection ascending = 1;
    repeated string column_name = 2;
  }
  message Dependency {
    repeated Projection dependency_projection = 1;
    repeated Filter dependency_filter = 2;
  }
  message Limit {
    int32 offset = 1;
    int32 length = 2;
  }
  string db_name = 1;
  int32 query_ID = 2;
  int32 work_ID = 3;
  repeated string table_name = 4;
  repeated string table_col = 5;
  repeated Filter table_filter = 6;
  Dependency dependency = 7;
  repeated int32 table_offset = 8;
  repeated int32 table_offlen = 9;
  repeated int32 table_datatype = 10;
  string table_alias = 11;
  repeated string column_alias = 12;
  repeated Projection column_projection = 13;
  repeated string group_by = 14;
  Order order_by = 15;
  Limit limit = 16;
  int32 pk_num = 17;
  repeated Filter having = 18;
}

message GenericQuery {
  string db_name = 1;
  string query = 2;
}

message Request {
  int32 query_id = 1;
  int32 work_id = 2;
  string db_name = 3;
  string table_name = 4;
}

message Response {
  string value = 1;
}

message QueryStringResult {
  string query_result = 1;
  int32 scanned_row_count = 2;
  int32 filtered_row_count = 3; 
}
